// swiftlint:disable all
// swiftformat:disable all

import XCTest
import SwiftUI
import Prefire

import SnapshotTesting
#if canImport(AccessibilitySnapshot)
    import AccessibilitySnapshot
#endif
{% if argument.mainTarget %}
@testable import {{ argument.mainTarget }}
{% endif %}

class PreviewTests: XCTestCase {
    private let deviceConfig: ViewImageConfig = .iPhoneX
    private let simulatorDevice = "{{ argument.simulatorDevice|default:"iPhone15,2" }}"
    private let requiredOSVersion = {{ argument.simulatorOSVersion|default:"16" }}
    {% if argument.file %}

    private var file: StaticString { .init(stringLiteral: "{{ argument.file }}") }
    {% endif %}

    override func setUp() {
        super.setUp()

        checkEnvironments()
        UIView.setAnimationsEnabled(false)
    }

    {% for type in types.types where type.implements.PrefireProvider or type.based.PrefireProvider or type|annotated:"PrefireProvider" %}
    func test_{{ type.name|lowerFirstLetter|replace:"_Previews", "" }}() {
        for preview in {{ type.name }}._allPreviews {
            // Given
            let isScreen = preview.layout == .device
            let device = preview.device?.snapshotDevice() ?? deviceConfig

            var delay: TimeInterval = 0.5
            var precision: Float = 1.0

            // When
            let view = preview.content
                .onPreferenceChange(DelayPreferenceKey.self) {
                    debugPrint("Delay: \($0)")
                    delay = $0
                }
                .onPreferenceChange(PrecisionPreferenceKey.self) {
                    debugPrint("Precision: \($0)")
                    precision = $0
                }

            let matchingView = isScreen ? AnyView(view) : AnyView(view
                .frame(width: device.size?.width)
                .fixedSize(horizontal: false, vertical: true)
            )

            // Then
            assertSnapshot(
                matching: matchingView,
                as: .wait(
                    for: delay,
                    on: .image(
                        drawHierarchyInKeyWindow: false,
                        precision: precision,
                        layout: isScreen ? .device(config: device) : .sizeThatFits
                    )
                ),
                named: preview.displayName{% if argument.file %},
                file: file{% endif %}
            )

#if canImport(AccessibilitySnapshot)
            let vc = UIHostingController(rootView: view)
            vc.view.frame = UIScreen.main.bounds
            assertSnapshot(
                matching: vc,
                as: .wait(
                    for: delay,
                    on: .accessibilityImage(showActivationPoints: .always)
                ),
                named: preview.displayName{% if argument.file %},
                file: file{% endif %}
            )
#endif
        }
    }

    {% endfor %}
    // MARK: Private

    private func checkEnvironments() {
        let deviceModel = ProcessInfo().environment["SIMULATOR_MODEL_IDENTIFIER"]
        let osVersion = ProcessInfo().operatingSystemVersion
        guard deviceModel?.contains(simulatorDevice) ?? false else {
            fatalError("Switch to using \(simulatorDevice) for these tests.")
        }

        guard osVersion.majorVersion == requiredOSVersion else {
            fatalError("Switch to iOS \(requiredOSVersion) for these tests.")
        }
    }
}

private extension PreviewDevice {
    func snapshotDevice() -> ViewImageConfig? {
        switch rawValue {
        case "iPhone 12", "iPhone 11", "iPhone 10":
            return .iPhoneX
        case "iPhone 6", "iPhone 6s", "iPhone 7", "iPhone 8":
            return .iPhone8
        case "iPhone 6 Plus", "iPhone 6s Plus", "iPhone 8 Plus":
            return .iPhone8Plus
        case "iPhone SE (1st generation)", "iPhone SE (2nd generation)":
            return .iPhoneSe
        default: return nil
        }
    }
}

// swiftlint:enable all
// swiftformat:enable all
